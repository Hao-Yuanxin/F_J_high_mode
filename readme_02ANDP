
/home/steven/test/Code-FanXL/ANT-Code/01*
测试FanXL的处理数据的脚本，其中有数据文件

/home/steven/test/Code-FanXL/ANT-Code/02*
 Fortran代码,包含串行和并行两个版本,
 参考Barmin 背景噪声数据处理算法(http://ciei.colorado.edu/Products/)


./Code-FanXL/ANT-Code/02_ANDP/Sequential 串行
执行./ANT-Code/02_ANDP/Sequential/TEST/目录下的Compile.sh
1.cd ../SRC/AFTAN
2.make
 makefile
 all: addition.mod
 addition.mod 伪目标（这里没有显式的声明 .PHONY : all）
 addition.mod: addition.f90
	$(FC) -c $^
 $^ ,自动化变量: 所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的，那么这个变量会去除重复的依赖目标，只保留一份
 fflags = -O -Wall -ffixed-line-length-none
 FFLAGS = $(DBG) $(fflags)
 FC = gfortran
 DBG = -g
 LDLIBS =  -lfftw3
 $(BIN) : $(FOBJS)
	$(FC) $(FFLAGS) $(FOBJS) -o $(BIN) $(LDLIBS)
 fortran 编译器选项 https://docs.oracle.com/cd/E19205-01/820-1206/aevcv/index.html
 DBG = -g，Debug选项；-O[n]表示优化级别，-O就等于-O3(O是大写的O，不是0);-W[n]，显示错误信息，这里all应该是W4
 -ffixed-line-length-none 不限语法的长度，f90默认一行不超过132
  -lname ，链接库，这里链接 -lfftw3
 $(FC) $(FFLAGS) $(FOBJS) -o $(BIN) $(LDLIBS)
 因为隐含规则，会自动的从.o文件推导出依赖的.f
 install :: $(BIN)
 变量多加一个：变成静态的，只能使用前面已定义好了的变量，用于变量中的变量
 clean把编译的.o和.mod文件都删了
 cleanall执行了clean，并且删除了可执行文件$(BIN)
3.make install
 将可执行文件AFTAN_PROG放在此目录下INST_DIR = /usr/local/bin
4.make cleanall
 就剩下/usr/local/bin的可执行文件AFTAN_PROG
5.cd ../AND_Driver
 进入AND_Driver
6.和上面步骤一样，make cleanall ；make ；sudo make install； make cleanall
 makefile
 %.o: %.f90
	$(FC) -c $^
 定义规则模式，从.f90编译出.o
 在INST_DIR = /usr/local/bin/下生成AND_Driver程序
  
 配置输入文件参数
 /Sequential/TEST/input.dat

 执行Run.py
 
######################################
######################################

 addition.f90
************************
 MODULE addition







 




