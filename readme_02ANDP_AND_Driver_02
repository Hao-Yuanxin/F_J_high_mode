###############################################################################
AND_Drive

part 02                # line number 241
去仪器响应(去均值，去趋势，去仪器响应，输出sac是速度谱)，截取地震记录(t0,tlen,写在input.dat)，并且写入 tarfolder/DATA_VEL/年/月/日期下
删除复制后的SAC文件夹(rm -rf '//TRIM(tarfolder)//'/DATA') # 将原始数据复制到DATA文件夹下，将处理后的SAC放入DATA_VEL下，删除DATA文件夹
***********************************************************************************************************************

循环事件，台站
str_temp = 文件路径 tarfolder/DATA_VEL/年/月/日期/文件  # part 02处理后的SAC文件路径
INQUIRE(FILE=str_temp, EXIST=alive)，判断文件是否存在，存在alive是T,说明已经处理完了，CYCLE(等于C里面的continue，跳过此次循环)
str_temp = 日期文件夹 
CALL remove_RESP(sdb, iev, ist, f1, f2, f3, f4)          # MODULE Main_Proc
将tarfolder下的SAC复制到当前目录/temp.sac,对temp.sac去均值，去趋势，去仪器响应，输出速度 单位nm/s 

CALL cut_data(sdb, iev, ist, t0, tlen) # 将temp.sac截取，写到cut.sac里，删除temp.sac
# cut.sac 头文件的参考时间 2000年第一天 b = 0.0 这个头文件不知道搞什么鬼
INQUIRE(FILE=str_temp, EXIST=alive)     # 这里的str_temp是日期路径，INQUIRE也可以判断目录是否存在，不存在新建一个
把截取好的cut.sac写入tarfolder/DATA_VEL/年/月/日期/下 文件名:eg:BU.BDH.LHZ.SAC
把数据文件都处理完，删除CALL SYSTEM('rm -rf '//TRIM(tarfolder)//'/DATA') # 备份文件，卸磨杀驴

part 03  # line number 310
调整相位，带通滤波，傅立叶反变化，写入 tarfolder/DATA/年/月/日期下
*******************************************************************************************

CALL SYSTEM('rm -rf sac.lst')  # part 03 会生成一个sac.lst，这里删除以前的sac.lst ！ rm 不存在的东西不会报错
OPEN(UNIT=19, FILE='list_sac.tmp', STATUS='REPLACE', ACTION='WRITE') # 以写的方式打开 list_sac.tmp
for year in `ls DATA_VEL` # 循环 DATA_VEL 文件夹下的年文件夹，赋值给year
for month in  `ls DATA_VEL/$year`  # 循环月文件夹
循环天文件夹
循环每个文件，将文件名以追加的方式写入sac.lst    # ls ', TRIM(tarfolder)//'/DATA_VEL/$year/$month/$day/* >> sac.lst  
这种*号表示方法，显示的带路径的文件，适用于显示这种比较整齐的数据文件。如果目录下还有文件夹，显示的内容就比较乱
执行shell，执行上面的操作

OPEN sac.lst    # line 335
读取 sac.lst，也就是part02处理过的SAC文件的路径，赋值给str_temp # 循环每一个SAC文件
 读SAC文件，nlen是记录点数，dt采样的时间间隔，frac时间的残差(不在时间的点上的部分,小于0.5*dt)
 CALL frac_filter4(f1, f2, f3, f4, npow, dt, nlen, frac, seis_data, nerr)    #  line 369 MODULE Main_Proc
 # 对seis_data进行相位调整（因为时间相差frac)，然后带通滤波，然后反傅立叶变化，将处理完的数据赋给seis_data
 str_temp 赋值，是TRIM(tarfolder)//'/DATA/'/年/月/日/ # 天数路径 # 这个DATA文件夹里就是之前备份的原始文件，后来被卸磨杀驴了
 如果不存在str_temp，新建文件夹
 str_temp = TRIM(str_temp)//'/'//TRIM(strArray(nstrArray)) # 单个的文件
 CALL sacio_writesac(TRIM(str_temp), sac_head, seis_data, nerr) # 将 part03处理完的数据写到str_temp中,
 也就是 tarfolder/DATA/年/月/日期/
end DO
CALL SYSTEM('rm -rf list_sac.tmp sac.lst')  # 删除 临时文件
 

part 04 # line 417
1.正则化（滑动平均(也会滤波)或者onebit）
2.谱白化，带阻滤波(可选),带通滤波
3.将谱写入str_temp  # TRIM(tarfolder)//'/DATA/$year/$month/$day/文件名
***********************************************************************************************

tnorm：滑动平均 onebit：onebit notch: repressing the notch at 26s   
写一个shell脚本：
'for year in `ls ',TRIM(tarfolder)//'/DATA`' # 循环年，也就是ls tarfolder/DATA/
  for month in `ls # 循环月
    'for day in `ls ' # 循环julyer day
       'ls ', TRIM(tarfolder)//'/DATA/$year/$month/$day/* >> sac.lst'  # 把sac每个文件的的绝对路径写入sac.lst中
结束循环，执行shell   # line 445

OPEN(UNIT=22, FILE='sac.lst', STATUS='OLD', ACTION='READ', IOSTAT=nerr) # 打开sac.lst
DO # 循环每一个sac文件 line459
 READ(22, "(A)", IOSTAT=nerr) str_temp 读取sac.lst中的每一行(绝对路径)
 #用shell脚本执行sac命令
 sac<<EOF 打开sac，'r ', TRIM(str_temp)读取sac文件
 IF (tnorm) THEN  # 如果滑动平均，
  WRITE(23,"('bp co ', F10.6, F10.6,' n 4 p 2')") fr1, fr2 
  # 默认butterworth 拐角频率fr1, fr2 4极点 (零相位滤波器，双通)双通 !双通会在起跳之前有虚假的前驱信号
  abs # 取绝对值
  WRITE(23,"('smooth mean h ', I3)") nwt   # 对取绝对值，然后再平滑（滑动平均），nwt是半窗长度
  WRITE(23,"(A)") 'w amp.avg'              # 写人到amp.avg
  WRITE(23,"(A, A)") 'r ', TRIM(str_temp)  # 再次读入sac数据  
  WRITE(23,"(A)") 'divf amp.avg'           # 除以amp.avg
  写入到smooth.sac中，退出sac；EOF，sac命令结束
 IF (onebit) THEN                          # 如果oneit
  CALL sacio_readsac(TRIM(str_temp), sac_head, seis_data, nerr)  # 读sac的头和数据
  WHERE (seis_data>0) seis_data = 1   ELSEWHERE (seis_data<0) seis_data = -1  # 数据大于零，置1；fortran where用法
  CALL sacio_writesac('smooth.sac', sac_head, seis_data, nerr)   # 处理完的数据保存为smooth.sac  
 end if      
 CALL SYSTEM('rm -rf '//TRIM(str_temp)) #删除正则化之前的sac
 CALL SYSTEM('rm -rf smooth.sac') #删除smooth.sac，其数据已经读在seis_data中了

 CALL white_reject_filter4(f1,f2,f3,f4,dt,npow,nwf,n,notch,freqmin,seis_data,fftout,Nk,fs) # line 573 MODULE Main_Proc
 # fft，谱白化(谱滑动平均)，带阻(可选),带通
 # fft 正变化FFTW_BACKWARD，我改成FFTW_FORWARD,
 # 注释掉!sf(1) = sf(1) / 2.0D0 ！注： pi到2pi要用复共轭补齐
 CALL write_mydata(TRIM(str_temp), Nk, CMPLX(fftout), nerr) # 将fftout以二进制写入文件str_temp中，先写入Nk，后写入数组(只有0到pi)
 此时str_temp的路径，也就是sdb%rec%name
 IF (ALLOCATED(seis_data)) DEALLOCATE(seis_data)
 IF (ALLOCATED(fftout)) DEALLOCATE(fftout)  # 已经把0到pi的谱写入str_temp文件中了，将seis_data,ffout释放
 CALL SYSTEM('rm -rf list_sac.tmp sac.lst') # list_sac.tmp sac.lst

port 05 # line603
***************************************************************************************
intput.dat line 33 sbs, bs_N #是否做引导，引导重复的次数
line 34 bs_type a_b-type of dispersion (a=[1-normal;2-phase matched filtering],b=[1-raw;2-clear])
IF (sbs(1:1) == 'Y' .OR. sbs(1:1) == 'y') isbs = .TRUE. # 如果引导
CALL cc_and_aftan(sdb, lag, tarfolder, isbs, bs_N, bs_type)  # 执行cc_and_aftan MODULE Main_Proc
# sad,sac_db,包含了event，station，record信息
# lag,叠加的时间长度，isbs:是否引导(互相关，提频散)，bs_N:引导次数，bs_type:method


#################################################################################################
MODULE Main_Proc
INCLUDE 'fftw3.f03'
用fftw3，不用编译fftw3.f03，只需要执行的时候加一句-lfftw3

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SUBROUTINE remove_RESP(sdb, iev, ist, f1, f2, f3, f4)
SAC文件去均值，去趋势，去仪器响应，输出的sac记录的是速度
判断f1,f2,f3,f4是否满足要求(f4>f3>f2>f1>0)
把SAC文件复制到tmp.sac
将命令写入sac_resp_bp.txt
对tmp.sac 去均值，去趋势，去仪器响应
'transfer from polezero subtype PZfiles/'TRIM(sdb%st(ist)%n_name)//'..LHZ.PZ to vel freq ',f1, f2, f3, f4
从SAC PZ 仪器响应文件里去仪器响应，vel表示去仪器响应得到速度，freq是去仪器响应时，带通滤波
乘以10的9次方
transfer命令，详情看https://seisman.github.io/SAC_Docs_zh/commands/transfer/
WRITE(18, "(A)") 'w over' # w over 用内存里的文件覆盖磁盘里的文件

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SUBROUTINE cut_data(sdb, iev, ist, t0, tlen)
# t0 是开始时刻(相对文件时间) tlen是数据时间长度，单位s
tend = t0 + tlen
dt=delta N=nrec，数据长度 Nlen截取后的长度
trb = sdb%rec(iev,ist)%t0 - sdb%ev(iev)%t0  # 数据起点的时间-文件时间(参考时间)
tre = trb + (N-1)*dt           # 数据的终点(未截取的) - 文件时间(参考时间)
判断选取的时间是否合适，不合适就返回
合适的话,CALL sacio_readsac('tmp.sac', shd, seis_data, nerr)  # shd：头  seis_data：数据
Ngap = INT((t0-trb)/dt+0.5) # 要跳过的点数,四舍五入
shd%npts = Nlen  # 数据长度，因为写数据命令会根据npts决定数据长度
参考时间:year:2000 jday:1 时分秒毫秒都是0 b = 0.0
shd%user1 = REAL(sdb%rec(iev,ist)%frac)
CALL sacio_writesac('cut.sac', shd, seis_data(Ngap+1:), nerr) # 将截取完的数据保存到cut.sac
删除temp.sac文件
# 总觉得头文件的参考时间和b值不太对，不过已经存在了sdb里面了

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SUBROUTINE frac_filter4(f1, f2, f3, f4, npow, dt, n, frac, seis_data, nerr) #  n 是数据长度
# 对seis_data 数据进行进行相位移动(frac)，再进行滤波
# 有改动，1.傅立叶变化，正变化改成了FFTW_FORWARD，反变化变成了FFTW_BACKWARD(和原来相反) 2.相位移动原来是1：Nfft/2，我改成了Nk(Nfft/2+1),Nk是对称点，对应的pi;
# 3.sf(k) = sf(k) * CDEXP(-2*pi*ci*fs*frac*(k-1)) 乘以-2pi  4.给pi到2pi的数据，添加复共轭(关于Nk对称)，所以也不用将sf(1)=sf(1)/2,也不用在反傅立叶变化之后对s(k)*2

COMPLEX(DBL), ALLOCATABLE, DIMENSION(:) :: s, sf    # 数组长度为Nfft
TYPE(C_PTR) :: plan      USE, INTRINSIC :: ISO_C_BINDING  # F03标准的数据传递  C语言中的指针变量

Nfft = 2**MAX(INT(LOG(REAL(n))/LOG(2.0))+1, 13) # number of points for FFT 对应圆频率0到2pi 频率 0到1/dt ！为什么最小是2的13次方？ 
# fft的长度是2的n次方 2^(ln(n)/ln(2))=n 取整会导致频率点数高于时间点数  Nfft/2 < n <Nfft
fs = 1.0D0/(dt*Nfft)     # fs 频率间隔
s(k) = seis_data(k)     # 把地震记录赋给s(:)
# 对s做FFT,s必须是复数，s的长度是Nfft，不足的补零
plan = fftw_plan_dft_1d(Nfft, s, sf, FFTW_BACKWARD, FFTW_ESTIMATE)  # 接口的定义在fftw3.f03
# 创建变化方案,这里是FFTW_BACKWARD(+1)，我改成了FFTW_FORWARD(-1)

CALL fftw_execute_dft(plan, s, sf)  # fftw3.f03 subroutine fftw_execute_dft(p,in,out)
# 执行FFT
CALL fftw_destroy_plan(plan)  # 释放内存

IF (ABS(frac) > 0.05D0*dt) THEN  # 相位调整
sf(k) = sf(k) * CDEXP(ci*fs*frac*(k-1))  # 我推导的多了一个系数-2pi 原来计算到1,Nfft/2，我计算到了Nk = Nfft/2 + 1
sf后半部分，都置零(实部和虚部)
sf(Nk) = DCMPLX(DREAL(sf(Nk)), 0.0D0) # 矫正Nk点，对应的pi，复共轭对称点,虚部为零
CALL band_pass(f1, f2, f3, f4, fs, Nk, npow, sf) # 带通滤波，npow是滤波器参数，表示f1，f2之间的加余弦窗的次数，越大迭代的次数越多，靠近f2越陡
给pi到2pi添加复共轭
反傅立叶变化，然后s转化为seis_data # 1.FFTW_BACKWARD(原来是FORWARD) 2.s/Nfft才是seis_data

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SUBROUTINE band_pass(f1, f2, f3, f4, fs, Nk, npow, sf)
f1 f2 f3 f4是滤波范围 fs是频率间隔 Nk是频率点数，只包括一半，1到Nfft/2+1 （0到pi，包括pi)
npow是滤波器参数，可以理解为滤波器的阶数，表示对过渡区域(f1,f2),操作的次数(1-cos((f-f1)/(f2-f1))) if f1<f<=f2
sf是频率序列  

pi = DATAN(1.0D0)*4.0D0   # DATAN = tan-1(反正切)  DATAN(1.0D0)=pi/4
sf(i) = sf(i) * alpha(i)   # 滤波系数  alpha(i) f<f1或f>f4,alpha=0; f在(f1,f2)或（f3，f4)之间，会逐渐从0到1；
npow，整数，加余弦窗的次数，越大，接近f2越陡

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SUBROUTINE white_reject_filter4(f1,f2,f3,f4,dt,npow,nwf,n,notch,freqmin,seis_data,fftout,Nk,fs)
# fft，谱白化(谱滑动平均)，带阻(可选),带通
# !我把FFT正变换变成FFTW_FORWARD，pi到2pi要用复共轭补全 注释掉580行，sf(1) = sf(1) / 2.0D0 
将seis_data赋给s，然后对s进行傅立叶变化，sf
fs = 1.0D0/(dt*Nfft) # fs 频率间隔
CALL whiten_spectra(f1, f4, fs, Nk, sf, nwf) # 谱白化 nwf,谱白化的半窗长
IF (notch) CALL band_rejection(0.0350,0.0360,0.0390,0.0400,fs,Nk,sf,npow,freqmin)  #
# 如果选择了帯阻滤波 CALL band_rejection,sf(i) = sf(i) * alpha(i),（f2，f3）时， alpha(i)=freqmin
CALL band_pass(f1, f2, f3, f4, fs, Nk, npow, sf)



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SUBROUTINE whiten_spectra(f1, f4, fs, Nk, sf, nwf)
谱白化 nwf,谱白化的半窗长，这里的谱白化实际上是对谱做了滑动平均
# sf(k) = sf(k) * sf_weight(k)   #最终的表达式
sf_amp(k) = ABS(sf(k))  # 取谱的绝对值
DO k = 1, Nk
 当f<f1或f>f4时， sf_weight(k)=0
 当f1<f<f4时，将点k为中心的nwf为半窗长的区域的sf_amp求和  ！这里需要加个约束，就是k要大于nwf，以免出现sf_amp(ijk)的索引为负，产生错误的结果
 sf_weight(k) = 1.0D0 / (sum / (2.0D0*nwf+1.0D0))  # sum / (2.0D0*nwf+1.0D0)将sum平均到每个点上
end do

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SUBROUTINE band_rejection(f1, f2, f3, f4, fs, Nk, sf, npow, freqmin)
# freqmin 带阻滤波的freqmin，f2, f3之间没有完全压制，保留的百分比是freqmin
# sf(i) = sf(i) * alpha(i)  # 最终的表达式
f<f1 or f>f4,alpha(i)=1;
(f1, f2),(f3, f4)加余弦窗+freqmin
(f2,f3）之间，alpha(i) = freqmin

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SUBROUTINE cc_and_aftan(sdb, lag, tarfolder, isbs, bs_N, bs_type)
# sad,sac_db,包含了event，station，record信息
# lag,叠加的时间长度，isbs:是否引导，bs_N:引导次数，bs_type:method

IF (isbs) CALL SYSTEM('mkdir '//TRIM(tarfolder)//'/tempfolder') # 如果isbs是ture，新建tarfolder/tempfolder文件夹
OPEN(UNIT=24, FILE='CCRecord.lst', STATUS='REPLACE', ACTION='WRITE') # 以REPLACE方式打开CCRecord.lst
Do jsta1 = 1, nst-1 # 循环A station；A和B互相关，排列
 DO jsta2 = (jsta1+1), nst #  循环B station
   str_temp = TRIM(tarfolder)//'/FINAL/'//TRIM(sdb%st(jsta1)%n_name)//'/'//&
                TRIM(sdb%st(jsta1)%n_name)//'_'//TRIM(sdb%st(jsta2)%n_name)//'.dat' #文件路径格式 /tar/FINAL/A/A_B.dat
   nstack = 0
   xcorr = 0.0
   IF (isbs) CALL SYSTEM('rm -rf '//TRIM(tarfolder)//'/tempfolder/*') 如果引导，清空临时文件夹
   DO iev = 1, nev # 循环事件
     IF (check_data(sdb, jsta1, jsta2, iev)) THEN   # check 台站对在那一天是否有记录 MODULE Main_Proc
  	dt = sdb%rec(iev,jsta1)%dt # 得到A在iev的delta
        str_temp = sdb%rec(iev,jsta1)%name     # str_temp是A在iev的FFT !这里我有改动，正变化是forward
	CALL read_mydata(TRIM(str_temp), nlen, fftdata1, nerr)  # 把A在iev的FFT数据读到了fftdata1里，数据长度返回给nlen(Nk)
        同样的，将B在iev的数据读到了fftdata2
        CALL multi_fft(DCMPLX(fftdata1), DCMPLX(fftdata2), nlen, dataout, nout)  # MODULE Main_Proc
	# 对两个数组进行互相关，nlen可能不一样长(应该是一样的，看看有没有降采样统一dt)
	# ！注释掉原来的，用复共轭补齐，并且傅立叶反变化要改成backward(原来forward)，反变化之后的乘以2也删除 line 1295 
	% Keep only the lags we want and move negative lags before positive  #可以看matlab的xcorr.m的代码
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
LOGICAL FUNCTION check_data(sdb, jsta1, jsta2, iev)
# check if there are FFT data for one station pair at one particular event
# 通过判断sdb%rec(iev,jsta1)%name和sdb%rec(iev,jsta2)%name文件是否存在

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SUBROUTINE multi_fft(sf1, sf2, nlen, dataout, nout)
# out:dataout:互相关之后的时间序列, nout:互相关之后的长度
nout = (nlen-1)*2   
DO k = 1, nlen
  sfcorr(k) = sf1(k)*DCONJG(sf2(k))  # 频率域是乘积(复共轭)

！注释掉原来的，用复共轭补齐，并且傅立叶反变化要改成backward line1295
傅立叶反变化，得到时间序列dataout



MODULE my_data_io
#################################################################################################
SUBROUTINE write_mydata(filename, n, comdata, nerr)
# 把comdata写到filename中，二进制无格式，WRITE(55) n !文本文件的话不能这样，需要指定格式
先写入n #数据个数
再写入连续的数据

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SUBROUTINE read_mydata(filename, n, comdata, nerr)
# out:n是数据长度，comdata是可变大小的复数数组
直接把filename里的FFT单精度数据读了进去，因为是二进制的(无格式)


















